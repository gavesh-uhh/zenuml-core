// Generated from java-escape by ANTLR 4.11.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,69,556,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,
2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,
11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,
2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,
40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,
2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,
55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,
7,62,2,63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,
69,2,70,7,70,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,
1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,
1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,
1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,11,1,11,4,11,211,8,11,
11,11,12,11,212,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,
15,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,21,1,21,
1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,
29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,34,1,34,
1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,283,
8,36,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,
39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
1,39,1,39,1,39,1,39,1,39,1,39,3,39,319,8,39,1,40,1,40,1,40,1,40,1,40,1,40,
1,40,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,
43,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,46,
1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,367,8,46,1,47,
1,47,1,47,1,47,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,
50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,53,1,53,
1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,
53,413,8,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,
54,441,8,54,1,55,1,55,5,55,445,8,55,10,55,12,55,448,9,55,1,56,1,56,1,57,
1,57,5,57,454,8,57,10,57,12,57,457,9,57,1,58,1,58,1,58,1,59,4,59,463,8,59,
11,59,12,59,464,1,60,4,60,468,8,60,11,60,12,60,469,1,61,4,61,473,8,61,11,
61,12,61,474,1,61,1,61,5,61,479,8,61,10,61,12,61,482,9,61,1,61,1,61,4,61,
486,8,61,11,61,12,61,487,3,61,490,8,61,1,62,1,62,1,62,1,62,5,62,496,8,62,
10,62,12,62,499,9,62,1,62,3,62,502,8,62,1,63,1,63,1,63,1,63,1,64,1,64,1,
64,1,64,5,64,512,8,64,10,64,12,64,515,9,64,1,64,1,64,1,64,1,64,1,65,1,65,
1,66,1,66,5,66,525,8,66,10,66,12,66,528,9,66,1,66,1,66,1,66,1,66,5,66,534,
8,66,10,66,12,66,537,9,66,1,67,4,67,540,8,67,11,67,12,67,541,1,68,1,68,1,
68,1,68,1,69,4,69,549,8,69,11,69,12,69,550,1,70,1,70,1,70,1,70,1,513,0,71,
3,1,5,2,7,3,9,4,11,5,13,6,15,7,17,8,19,9,21,10,23,0,25,11,27,12,29,13,31,
14,33,15,35,16,37,17,39,18,41,19,43,20,45,21,47,22,49,23,51,24,53,25,55,
26,57,27,59,28,61,29,63,30,65,31,67,32,69,33,71,34,73,35,75,36,77,37,79,
38,81,39,83,40,85,41,87,42,89,43,91,44,93,45,95,46,97,47,99,48,101,49,103,
50,105,51,107,52,109,53,111,54,113,55,115,56,117,57,119,58,121,0,123,59,
125,60,127,61,129,62,131,63,133,64,135,65,137,66,139,67,141,68,143,69,3,
0,1,2,8,2,0,9,9,32,32,3,0,48,57,65,70,97,102,4,0,48,57,65,90,95,95,97,122,
3,0,65,90,95,95,97,122,2,0,65,90,97,122,1,0,48,57,3,0,10,10,13,13,34,34,
2,0,10,10,13,13,578,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,
0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,
47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,
0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,
1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,
0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,
0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,
0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,
113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,123,1,0,0,0,0,125,
1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,
0,0,0,1,137,1,0,0,0,1,139,1,0,0,0,2,141,1,0,0,0,2,143,1,0,0,0,3,145,1,0,
0,0,5,149,1,0,0,0,7,157,1,0,0,0,9,168,1,0,0,0,11,177,1,0,0,0,13,185,1,0,
0,0,15,193,1,0,0,0,17,197,1,0,0,0,19,200,1,0,0,0,21,203,1,0,0,0,23,206,1,
0,0,0,25,208,1,0,0,0,27,214,1,0,0,0,29,217,1,0,0,0,31,220,1,0,0,0,33,223,
1,0,0,0,35,226,1,0,0,0,37,228,1,0,0,0,39,230,1,0,0,0,41,233,1,0,0,0,43,236,
1,0,0,0,45,238,1,0,0,0,47,240,1,0,0,0,49,242,1,0,0,0,51,244,1,0,0,0,53,246,
1,0,0,0,55,248,1,0,0,0,57,250,1,0,0,0,59,252,1,0,0,0,61,254,1,0,0,0,63,256,
1,0,0,0,65,258,1,0,0,0,67,260,1,0,0,0,69,262,1,0,0,0,71,264,1,0,0,0,73,269,
1,0,0,0,75,282,1,0,0,0,77,284,1,0,0,0,79,287,1,0,0,0,81,318,1,0,0,0,83,320,
1,0,0,0,85,327,1,0,0,0,87,331,1,0,0,0,89,335,1,0,0,0,91,341,1,0,0,0,93,345,
1,0,0,0,95,366,1,0,0,0,97,368,1,0,0,0,99,372,1,0,0,0,101,375,1,0,0,0,103,
379,1,0,0,0,105,385,1,0,0,0,107,393,1,0,0,0,109,412,1,0,0,0,111,440,1,0,
0,0,113,442,1,0,0,0,115,449,1,0,0,0,117,451,1,0,0,0,119,458,1,0,0,0,121,
462,1,0,0,0,123,467,1,0,0,0,125,489,1,0,0,0,127,491,1,0,0,0,129,503,1,0,
0,0,131,507,1,0,0,0,133,520,1,0,0,0,135,522,1,0,0,0,137,539,1,0,0,0,139,
543,1,0,0,0,141,548,1,0,0,0,143,552,1,0,0,0,145,146,7,0,0,0,146,147,1,0,
0,0,147,148,6,0,0,0,148,4,1,0,0,0,149,150,5,99,0,0,150,151,5,111,0,0,151,
152,5,110,0,0,152,153,5,115,0,0,153,154,5,116,0,0,154,155,1,0,0,0,155,156,
6,1,1,0,156,6,1,0,0,0,157,158,5,114,0,0,158,159,5,101,0,0,159,160,5,97,0,
0,160,161,5,100,0,0,161,162,5,111,0,0,162,163,5,110,0,0,163,164,5,108,0,
0,164,165,5,121,0,0,165,166,1,0,0,0,166,167,6,2,1,0,167,8,1,0,0,0,168,169,
5,115,0,0,169,170,5,116,0,0,170,171,5,97,0,0,171,172,5,116,0,0,172,173,5,
105,0,0,173,174,5,99,0,0,174,175,1,0,0,0,175,176,6,3,1,0,176,10,1,0,0,0,
177,178,5,97,0,0,178,179,5,119,0,0,179,180,5,97,0,0,180,181,5,105,0,0,181,
182,5,116,0,0,182,183,1,0,0,0,183,184,6,4,1,0,184,12,1,0,0,0,185,186,5,116,
0,0,186,187,5,105,0,0,187,188,5,116,0,0,188,189,5,108,0,0,189,190,5,101,
0,0,190,191,1,0,0,0,191,192,6,5,2,0,192,14,1,0,0,0,193,194,5,58,0,0,194,
195,1,0,0,0,195,196,6,6,3,0,196,16,1,0,0,0,197,198,5,60,0,0,198,199,5,60,
0,0,199,18,1,0,0,0,200,201,5,62,0,0,201,202,5,62,0,0,202,20,1,0,0,0,203,
204,5,45,0,0,204,205,5,62,0,0,205,22,1,0,0,0,206,207,7,1,0,0,207,24,1,0,
0,0,208,210,5,35,0,0,209,211,3,23,10,0,210,209,1,0,0,0,211,212,1,0,0,0,212,
210,1,0,0,0,212,213,1,0,0,0,213,26,1,0,0,0,214,215,5,124,0,0,215,216,5,124,
0,0,216,28,1,0,0,0,217,218,5,38,0,0,218,219,5,38,0,0,219,30,1,0,0,0,220,
221,5,61,0,0,221,222,5,61,0,0,222,32,1,0,0,0,223,224,5,33,0,0,224,225,5,
61,0,0,225,34,1,0,0,0,226,227,5,62,0,0,227,36,1,0,0,0,228,229,5,60,0,0,229,
38,1,0,0,0,230,231,5,62,0,0,231,232,5,61,0,0,232,40,1,0,0,0,233,234,5,60,
0,0,234,235,5,61,0,0,235,42,1,0,0,0,236,237,5,43,0,0,237,44,1,0,0,0,238,
239,5,45,0,0,239,46,1,0,0,0,240,241,5,42,0,0,241,48,1,0,0,0,242,243,5,47,
0,0,243,50,1,0,0,0,244,245,5,37,0,0,245,52,1,0,0,0,246,247,5,94,0,0,247,
54,1,0,0,0,248,249,5,33,0,0,249,56,1,0,0,0,250,251,5,59,0,0,251,58,1,0,0,
0,252,253,5,44,0,0,253,60,1,0,0,0,254,255,5,61,0,0,255,62,1,0,0,0,256,257,
5,40,0,0,257,64,1,0,0,0,258,259,5,41,0,0,259,66,1,0,0,0,260,261,5,123,0,
0,261,68,1,0,0,0,262,263,5,125,0,0,263,70,1,0,0,0,264,265,5,116,0,0,265,
266,5,114,0,0,266,267,5,117,0,0,267,268,5,101,0,0,268,72,1,0,0,0,269,270,
5,102,0,0,270,271,5,97,0,0,271,272,5,108,0,0,272,273,5,115,0,0,273,274,5,
101,0,0,274,74,1,0,0,0,275,276,5,110,0,0,276,277,5,105,0,0,277,283,5,108,
0,0,278,279,5,110,0,0,279,280,5,117,0,0,280,281,5,108,0,0,281,283,5,108,
0,0,282,275,1,0,0,0,282,278,1,0,0,0,283,76,1,0,0,0,284,285,5,105,0,0,285,
286,5,102,0,0,286,78,1,0,0,0,287,288,5,101,0,0,288,289,5,108,0,0,289,290,
5,115,0,0,290,291,5,101,0,0,291,80,1,0,0,0,292,293,5,119,0,0,293,294,5,104,
0,0,294,295,5,105,0,0,295,296,5,108,0,0,296,319,5,101,0,0,297,298,5,102,
0,0,298,299,5,111,0,0,299,319,5,114,0,0,300,301,5,102,0,0,301,302,5,111,
0,0,302,303,5,114,0,0,303,304,5,101,0,0,304,305,5,97,0,0,305,306,5,99,0,
0,306,319,5,104,0,0,307,308,5,102,0,0,308,309,5,111,0,0,309,310,5,114,0,
0,310,311,5,69,0,0,311,312,5,97,0,0,312,313,5,99,0,0,313,319,5,104,0,0,314,
315,5,108,0,0,315,316,5,111,0,0,316,317,5,111,0,0,317,319,5,112,0,0,318,
292,1,0,0,0,318,297,1,0,0,0,318,300,1,0,0,0,318,307,1,0,0,0,318,314,1,0,
0,0,319,82,1,0,0,0,320,321,5,114,0,0,321,322,5,101,0,0,322,323,5,116,0,0,
323,324,5,117,0,0,324,325,5,114,0,0,325,326,5,110,0,0,326,84,1,0,0,0,327,
328,5,110,0,0,328,329,5,101,0,0,329,330,5,119,0,0,330,86,1,0,0,0,331,332,
5,112,0,0,332,333,5,97,0,0,333,334,5,114,0,0,334,88,1,0,0,0,335,336,5,103,
0,0,336,337,5,114,0,0,337,338,5,111,0,0,338,339,5,117,0,0,339,340,5,112,
0,0,340,90,1,0,0,0,341,342,5,111,0,0,342,343,5,112,0,0,343,344,5,116,0,0,
344,92,1,0,0,0,345,346,5,99,0,0,346,347,5,114,0,0,347,348,5,105,0,0,348,
349,5,116,0,0,349,350,5,105,0,0,350,351,5,99,0,0,351,352,5,97,0,0,352,353,
5,108,0,0,353,94,1,0,0,0,354,355,5,115,0,0,355,356,5,101,0,0,356,357,5,99,
0,0,357,358,5,116,0,0,358,359,5,105,0,0,359,360,5,111,0,0,360,367,5,110,
0,0,361,362,5,102,0,0,362,363,5,114,0,0,363,364,5,97,0,0,364,365,5,109,0,
0,365,367,5,101,0,0,366,354,1,0,0,0,366,361,1,0,0,0,367,96,1,0,0,0,368,369,
5,114,0,0,369,370,5,101,0,0,370,371,5,102,0,0,371,98,1,0,0,0,372,373,5,97,
0,0,373,374,5,115,0,0,374,100,1,0,0,0,375,376,5,116,0,0,376,377,5,114,0,
0,377,378,5,121,0,0,378,102,1,0,0,0,379,380,5,99,0,0,380,381,5,97,0,0,381,
382,5,116,0,0,382,383,5,99,0,0,383,384,5,104,0,0,384,104,1,0,0,0,385,386,
5,102,0,0,386,387,5,105,0,0,387,388,5,110,0,0,388,389,5,97,0,0,389,390,5,
108,0,0,390,391,5,108,0,0,391,392,5,121,0,0,392,106,1,0,0,0,393,394,5,105,
0,0,394,395,5,110,0,0,395,108,1,0,0,0,396,397,5,64,0,0,397,398,5,83,0,0,
398,399,5,116,0,0,399,400,5,97,0,0,400,401,5,114,0,0,401,402,5,116,0,0,402,
403,5,101,0,0,403,413,5,114,0,0,404,405,5,64,0,0,405,406,5,115,0,0,406,407,
5,116,0,0,407,408,5,97,0,0,408,409,5,114,0,0,409,410,5,116,0,0,410,411,5,
101,0,0,411,413,5,114,0,0,412,396,1,0,0,0,412,404,1,0,0,0,413,110,1,0,0,
0,414,415,5,64,0,0,415,416,5,82,0,0,416,417,5,101,0,0,417,418,5,116,0,0,
418,419,5,117,0,0,419,420,5,114,0,0,420,441,5,110,0,0,421,422,5,64,0,0,422,
423,5,114,0,0,423,424,5,101,0,0,424,425,5,116,0,0,425,426,5,117,0,0,426,
427,5,114,0,0,427,441,5,110,0,0,428,429,5,64,0,0,429,430,5,82,0,0,430,431,
5,101,0,0,431,432,5,112,0,0,432,433,5,108,0,0,433,441,5,121,0,0,434,435,
5,64,0,0,435,436,5,114,0,0,436,437,5,101,0,0,437,438,5,112,0,0,438,439,5,
108,0,0,439,441,5,121,0,0,440,414,1,0,0,0,440,421,1,0,0,0,440,428,1,0,0,
0,440,434,1,0,0,0,441,112,1,0,0,0,442,446,5,64,0,0,443,445,7,2,0,0,444,443,
1,0,0,0,445,448,1,0,0,0,446,444,1,0,0,0,446,447,1,0,0,0,447,114,1,0,0,0,
448,446,1,0,0,0,449,450,5,46,0,0,450,116,1,0,0,0,451,455,7,3,0,0,452,454,
7,2,0,0,453,452,1,0,0,0,454,457,1,0,0,0,455,453,1,0,0,0,455,456,1,0,0,0,
456,118,1,0,0,0,457,455,1,0,0,0,458,459,3,123,60,0,459,460,3,121,59,0,460,
120,1,0,0,0,461,463,7,4,0,0,462,461,1,0,0,0,463,464,1,0,0,0,464,462,1,0,
0,0,464,465,1,0,0,0,465,122,1,0,0,0,466,468,7,5,0,0,467,466,1,0,0,0,468,
469,1,0,0,0,469,467,1,0,0,0,469,470,1,0,0,0,470,124,1,0,0,0,471,473,7,5,
0,0,472,471,1,0,0,0,473,474,1,0,0,0,474,472,1,0,0,0,474,475,1,0,0,0,475,
476,1,0,0,0,476,480,5,46,0,0,477,479,7,5,0,0,478,477,1,0,0,0,479,482,1,0,
0,0,480,478,1,0,0,0,480,481,1,0,0,0,481,490,1,0,0,0,482,480,1,0,0,0,483,
485,5,46,0,0,484,486,7,5,0,0,485,484,1,0,0,0,486,487,1,0,0,0,487,485,1,0,
0,0,487,488,1,0,0,0,488,490,1,0,0,0,489,472,1,0,0,0,489,483,1,0,0,0,490,
126,1,0,0,0,491,497,5,34,0,0,492,496,8,6,0,0,493,494,5,34,0,0,494,496,5,
34,0,0,495,492,1,0,0,0,495,493,1,0,0,0,496,499,1,0,0,0,497,495,1,0,0,0,497,
498,1,0,0,0,498,501,1,0,0,0,499,497,1,0,0,0,500,502,7,6,0,0,501,500,1,0,
0,0,501,502,1,0,0,0,502,128,1,0,0,0,503,504,7,7,0,0,504,505,1,0,0,0,505,
506,6,63,0,0,506,130,1,0,0,0,507,508,5,47,0,0,508,509,5,47,0,0,509,513,1,
0,0,0,510,512,9,0,0,0,511,510,1,0,0,0,512,515,1,0,0,0,513,514,1,0,0,0,513,
511,1,0,0,0,514,516,1,0,0,0,515,513,1,0,0,0,516,517,5,10,0,0,517,518,1,0,
0,0,518,519,6,64,4,0,519,132,1,0,0,0,520,521,9,0,0,0,521,134,1,0,0,0,522,
526,4,66,0,0,523,525,3,3,0,0,524,523,1,0,0,0,525,528,1,0,0,0,526,524,1,0,
0,0,526,527,1,0,0,0,527,529,1,0,0,0,528,526,1,0,0,0,529,530,5,61,0,0,530,
531,5,61,0,0,531,535,1,0,0,0,532,534,8,7,0,0,533,532,1,0,0,0,534,537,1,0,
0,0,535,533,1,0,0,0,535,536,1,0,0,0,536,136,1,0,0,0,537,535,1,0,0,0,538,
540,8,7,0,0,539,538,1,0,0,0,540,541,1,0,0,0,541,539,1,0,0,0,541,542,1,0,
0,0,542,138,1,0,0,0,543,544,7,7,0,0,544,545,1,0,0,0,545,546,6,68,5,0,546,
140,1,0,0,0,547,549,8,7,0,0,548,547,1,0,0,0,549,550,1,0,0,0,550,548,1,0,
0,0,550,551,1,0,0,0,551,142,1,0,0,0,552,553,7,7,0,0,553,554,1,0,0,0,554,
555,6,70,5,0,555,144,1,0,0,0,25,0,1,2,212,282,318,366,412,440,446,455,464,
469,474,480,487,489,495,497,501,513,526,535,541,550,6,0,1,0,0,3,0,5,2,0,
5,1,0,0,2,0,4,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class sequenceLexer extends antlr4.Lexer {

    static grammarFileName = "sequenceLexer.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN", "COMMENT_CHANNEL", 
                                                               "MODIFIER_CHANNEL" ];
	static modeNames = [ "DEFAULT_MODE", "EVENT", "TITLE_MODE" ];
	static literalNames = [ null, null, "'const'", "'readonly'", "'static'", 
                         "'await'", "'title'", "':'", "'<<'", "'>>'", "'->'", 
                         null, "'||'", "'&&'", "'=='", "'!='", "'>'", "'<'", 
                         "'>='", "'<='", "'+'", "'-'", "'*'", "'/'", "'%'", 
                         "'^'", "'!'", "';'", "','", "'='", "'('", "')'", 
                         "'{'", "'}'", "'true'", "'false'", null, "'if'", 
                         "'else'", null, "'return'", "'new'", "'par'", "'group'", 
                         "'opt'", "'critical'", null, "'ref'", "'as'", "'try'", 
                         "'catch'", "'finally'", "'in'", null, null, null, 
                         "'.'" ];
	static symbolicNames = [ null, "WS", "CONSTANT", "READONLY", "STATIC", 
                          "AWAIT", "TITLE", "COL", "SOPEN", "SCLOSE", "ARROW", 
                          "COLOR", "OR", "AND", "EQ", "NEQ", "GT", "LT", 
                          "GTEQ", "LTEQ", "PLUS", "MINUS", "MULT", "DIV", 
                          "MOD", "POW", "NOT", "SCOL", "COMMA", "ASSIGN", 
                          "OPAR", "CPAR", "OBRACE", "CBRACE", "TRUE", "FALSE", 
                          "NIL", "IF", "ELSE", "WHILE", "RETURN", "NEW", 
                          "PAR", "GROUP", "OPT", "CRITICAL", "SECTION", 
                          "REF", "AS", "TRY", "CATCH", "FINALLY", "IN", 
                          "STARTER_LXR", "ANNOTATION_RET", "ANNOTATION", 
                          "DOT", "ID", "NUMBER_UNIT", "INT", "FLOAT", "STRING", 
                          "CR", "COMMENT", "OTHER", "DIVIDER", "EVENT_PAYLOAD_LXR", 
                          "EVENT_END", "TITLE_CONTENT", "TITLE_END" ];
	static ruleNames = [ "WS", "CONSTANT", "READONLY", "STATIC", "AWAIT", "TITLE", 
                      "COL", "SOPEN", "SCLOSE", "ARROW", "HEX", "COLOR", 
                      "OR", "AND", "EQ", "NEQ", "GT", "LT", "GTEQ", "LTEQ", 
                      "PLUS", "MINUS", "MULT", "DIV", "MOD", "POW", "NOT", 
                      "SCOL", "COMMA", "ASSIGN", "OPAR", "CPAR", "OBRACE", 
                      "CBRACE", "TRUE", "FALSE", "NIL", "IF", "ELSE", "WHILE", 
                      "RETURN", "NEW", "PAR", "GROUP", "OPT", "CRITICAL", 
                      "SECTION", "REF", "AS", "TRY", "CATCH", "FINALLY", 
                      "IN", "STARTER_LXR", "ANNOTATION_RET", "ANNOTATION", 
                      "DOT", "ID", "NUMBER_UNIT", "UNIT", "INT", "FLOAT", 
                      "STRING", "CR", "COMMENT", "OTHER", "DIVIDER", "EVENT_PAYLOAD_LXR", 
                      "EVENT_END", "TITLE_CONTENT", "TITLE_END" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

sequenceLexer.EOF = antlr4.Token.EOF;
sequenceLexer.WS = 1;
sequenceLexer.CONSTANT = 2;
sequenceLexer.READONLY = 3;
sequenceLexer.STATIC = 4;
sequenceLexer.AWAIT = 5;
sequenceLexer.TITLE = 6;
sequenceLexer.COL = 7;
sequenceLexer.SOPEN = 8;
sequenceLexer.SCLOSE = 9;
sequenceLexer.ARROW = 10;
sequenceLexer.COLOR = 11;
sequenceLexer.OR = 12;
sequenceLexer.AND = 13;
sequenceLexer.EQ = 14;
sequenceLexer.NEQ = 15;
sequenceLexer.GT = 16;
sequenceLexer.LT = 17;
sequenceLexer.GTEQ = 18;
sequenceLexer.LTEQ = 19;
sequenceLexer.PLUS = 20;
sequenceLexer.MINUS = 21;
sequenceLexer.MULT = 22;
sequenceLexer.DIV = 23;
sequenceLexer.MOD = 24;
sequenceLexer.POW = 25;
sequenceLexer.NOT = 26;
sequenceLexer.SCOL = 27;
sequenceLexer.COMMA = 28;
sequenceLexer.ASSIGN = 29;
sequenceLexer.OPAR = 30;
sequenceLexer.CPAR = 31;
sequenceLexer.OBRACE = 32;
sequenceLexer.CBRACE = 33;
sequenceLexer.TRUE = 34;
sequenceLexer.FALSE = 35;
sequenceLexer.NIL = 36;
sequenceLexer.IF = 37;
sequenceLexer.ELSE = 38;
sequenceLexer.WHILE = 39;
sequenceLexer.RETURN = 40;
sequenceLexer.NEW = 41;
sequenceLexer.PAR = 42;
sequenceLexer.GROUP = 43;
sequenceLexer.OPT = 44;
sequenceLexer.CRITICAL = 45;
sequenceLexer.SECTION = 46;
sequenceLexer.REF = 47;
sequenceLexer.AS = 48;
sequenceLexer.TRY = 49;
sequenceLexer.CATCH = 50;
sequenceLexer.FINALLY = 51;
sequenceLexer.IN = 52;
sequenceLexer.STARTER_LXR = 53;
sequenceLexer.ANNOTATION_RET = 54;
sequenceLexer.ANNOTATION = 55;
sequenceLexer.DOT = 56;
sequenceLexer.ID = 57;
sequenceLexer.NUMBER_UNIT = 58;
sequenceLexer.INT = 59;
sequenceLexer.FLOAT = 60;
sequenceLexer.STRING = 61;
sequenceLexer.CR = 62;
sequenceLexer.COMMENT = 63;
sequenceLexer.OTHER = 64;
sequenceLexer.DIVIDER = 65;
sequenceLexer.EVENT_PAYLOAD_LXR = 66;
sequenceLexer.EVENT_END = 67;
sequenceLexer.TITLE_CONTENT = 68;
sequenceLexer.TITLE_END = 69;

sequenceLexer.COMMENT_CHANNEL = 2;
sequenceLexer.MODIFIER_CHANNEL = 3;

sequenceLexer.EVENT = 1;
sequenceLexer.TITLE_MODE = 2;


sequenceLexer.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch (ruleIndex) {
		case 66:
			return this.DIVIDER_sempred(localctx, predIndex);
    	default:
    		throw "No registered predicate for:" + ruleIndex;
    }
};

sequenceLexer.prototype.DIVIDER_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.column === 0;
		default:
			throw "No predicate with index:" + predIndex;
	}
};




