// Generated from java-escape by ANTLR 4.11.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,67,538,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,
2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,
11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,
2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,
40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,
2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,
55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,
7,62,2,63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,1,0,1,0,1,0,1,0,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,
9,1,9,1,9,1,10,1,10,1,11,1,11,4,11,205,8,11,11,11,12,11,206,1,12,1,12,1,
12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,18,
1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,
24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,
1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,
35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,277,8,36,1,37,1,37,1,37,1,38,
1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,
39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
1,39,3,39,313,8,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,
1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,
45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,
1,46,1,46,1,46,1,46,1,46,1,46,3,46,361,8,46,1,47,1,47,1,47,1,48,1,48,1,48,
1,48,1,49,1,49,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,
50,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
1,52,1,52,1,52,1,52,1,52,3,52,403,8,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,
1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,
53,1,53,1,53,1,53,1,53,3,53,431,8,53,1,54,1,54,5,54,435,8,54,10,54,12,54,
438,9,54,1,55,1,55,1,56,1,56,5,56,444,8,56,10,56,12,56,447,9,56,1,57,4,57,
450,8,57,11,57,12,57,451,1,58,4,58,455,8,58,11,58,12,58,456,1,58,1,58,5,
58,461,8,58,10,58,12,58,464,9,58,1,58,1,58,4,58,468,8,58,11,58,12,58,469,
3,58,472,8,58,1,59,1,59,1,59,1,59,5,59,478,8,59,10,59,12,59,481,9,59,1,59,
3,59,484,8,59,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,5,61,494,8,61,10,61,
12,61,497,9,61,1,61,1,61,1,61,1,61,1,62,1,62,1,63,1,63,5,63,507,8,63,10,
63,12,63,510,9,63,1,63,1,63,1,63,1,63,5,63,516,8,63,10,63,12,63,519,9,63,
1,64,4,64,522,8,64,11,64,12,64,523,1,65,1,65,1,65,1,65,1,66,4,66,531,8,66,
11,66,12,66,532,1,67,1,67,1,67,1,67,1,495,0,68,3,1,5,2,7,3,9,4,11,5,13,6,
15,7,17,8,19,9,21,10,23,0,25,11,27,12,29,13,31,14,33,15,35,16,37,17,39,18,
41,19,43,20,45,21,47,22,49,23,51,24,53,25,55,26,57,27,59,28,61,29,63,30,
65,31,67,32,69,33,71,34,73,35,75,36,77,37,79,38,81,39,83,40,85,41,87,42,
89,43,91,44,93,45,95,46,97,47,99,48,101,49,103,50,105,51,107,52,109,53,111,
54,113,55,115,56,117,57,119,58,121,59,123,60,125,61,127,62,129,63,131,64,
133,65,135,66,137,67,3,0,1,2,7,2,0,9,9,32,32,3,0,48,57,65,70,97,102,4,0,
48,57,65,90,95,95,97,122,3,0,65,90,95,95,97,122,1,0,48,57,3,0,10,10,13,13,
34,34,2,0,10,10,13,13,560,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,
0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,
0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,
57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,
0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,
1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,
0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,
0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,
0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,
0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,1,131,1,0,0,0,
1,133,1,0,0,0,2,135,1,0,0,0,2,137,1,0,0,0,3,139,1,0,0,0,5,143,1,0,0,0,7,
151,1,0,0,0,9,162,1,0,0,0,11,171,1,0,0,0,13,179,1,0,0,0,15,187,1,0,0,0,17,
191,1,0,0,0,19,194,1,0,0,0,21,197,1,0,0,0,23,200,1,0,0,0,25,202,1,0,0,0,
27,208,1,0,0,0,29,211,1,0,0,0,31,214,1,0,0,0,33,217,1,0,0,0,35,220,1,0,0,
0,37,222,1,0,0,0,39,224,1,0,0,0,41,227,1,0,0,0,43,230,1,0,0,0,45,232,1,0,
0,0,47,234,1,0,0,0,49,236,1,0,0,0,51,238,1,0,0,0,53,240,1,0,0,0,55,242,1,
0,0,0,57,244,1,0,0,0,59,246,1,0,0,0,61,248,1,0,0,0,63,250,1,0,0,0,65,252,
1,0,0,0,67,254,1,0,0,0,69,256,1,0,0,0,71,258,1,0,0,0,73,263,1,0,0,0,75,276,
1,0,0,0,77,278,1,0,0,0,79,281,1,0,0,0,81,312,1,0,0,0,83,314,1,0,0,0,85,321,
1,0,0,0,87,325,1,0,0,0,89,329,1,0,0,0,91,335,1,0,0,0,93,339,1,0,0,0,95,360,
1,0,0,0,97,362,1,0,0,0,99,365,1,0,0,0,101,369,1,0,0,0,103,375,1,0,0,0,105,
383,1,0,0,0,107,402,1,0,0,0,109,430,1,0,0,0,111,432,1,0,0,0,113,439,1,0,
0,0,115,441,1,0,0,0,117,449,1,0,0,0,119,471,1,0,0,0,121,473,1,0,0,0,123,
485,1,0,0,0,125,489,1,0,0,0,127,502,1,0,0,0,129,504,1,0,0,0,131,521,1,0,
0,0,133,525,1,0,0,0,135,530,1,0,0,0,137,534,1,0,0,0,139,140,7,0,0,0,140,
141,1,0,0,0,141,142,6,0,0,0,142,4,1,0,0,0,143,144,5,99,0,0,144,145,5,111,
0,0,145,146,5,110,0,0,146,147,5,115,0,0,147,148,5,116,0,0,148,149,1,0,0,
0,149,150,6,1,1,0,150,6,1,0,0,0,151,152,5,114,0,0,152,153,5,101,0,0,153,
154,5,97,0,0,154,155,5,100,0,0,155,156,5,111,0,0,156,157,5,110,0,0,157,158,
5,108,0,0,158,159,5,121,0,0,159,160,1,0,0,0,160,161,6,2,1,0,161,8,1,0,0,
0,162,163,5,115,0,0,163,164,5,116,0,0,164,165,5,97,0,0,165,166,5,116,0,0,
166,167,5,105,0,0,167,168,5,99,0,0,168,169,1,0,0,0,169,170,6,3,1,0,170,10,
1,0,0,0,171,172,5,97,0,0,172,173,5,119,0,0,173,174,5,97,0,0,174,175,5,105,
0,0,175,176,5,116,0,0,176,177,1,0,0,0,177,178,6,4,1,0,178,12,1,0,0,0,179,
180,5,116,0,0,180,181,5,105,0,0,181,182,5,116,0,0,182,183,5,108,0,0,183,
184,5,101,0,0,184,185,1,0,0,0,185,186,6,5,2,0,186,14,1,0,0,0,187,188,5,58,
0,0,188,189,1,0,0,0,189,190,6,6,3,0,190,16,1,0,0,0,191,192,5,60,0,0,192,
193,5,60,0,0,193,18,1,0,0,0,194,195,5,62,0,0,195,196,5,62,0,0,196,20,1,0,
0,0,197,198,5,45,0,0,198,199,5,62,0,0,199,22,1,0,0,0,200,201,7,1,0,0,201,
24,1,0,0,0,202,204,5,35,0,0,203,205,3,23,10,0,204,203,1,0,0,0,205,206,1,
0,0,0,206,204,1,0,0,0,206,207,1,0,0,0,207,26,1,0,0,0,208,209,5,124,0,0,209,
210,5,124,0,0,210,28,1,0,0,0,211,212,5,38,0,0,212,213,5,38,0,0,213,30,1,
0,0,0,214,215,5,61,0,0,215,216,5,61,0,0,216,32,1,0,0,0,217,218,5,33,0,0,
218,219,5,61,0,0,219,34,1,0,0,0,220,221,5,62,0,0,221,36,1,0,0,0,222,223,
5,60,0,0,223,38,1,0,0,0,224,225,5,62,0,0,225,226,5,61,0,0,226,40,1,0,0,0,
227,228,5,60,0,0,228,229,5,61,0,0,229,42,1,0,0,0,230,231,5,43,0,0,231,44,
1,0,0,0,232,233,5,45,0,0,233,46,1,0,0,0,234,235,5,42,0,0,235,48,1,0,0,0,
236,237,5,47,0,0,237,50,1,0,0,0,238,239,5,37,0,0,239,52,1,0,0,0,240,241,
5,94,0,0,241,54,1,0,0,0,242,243,5,33,0,0,243,56,1,0,0,0,244,245,5,59,0,0,
245,58,1,0,0,0,246,247,5,44,0,0,247,60,1,0,0,0,248,249,5,61,0,0,249,62,1,
0,0,0,250,251,5,40,0,0,251,64,1,0,0,0,252,253,5,41,0,0,253,66,1,0,0,0,254,
255,5,123,0,0,255,68,1,0,0,0,256,257,5,125,0,0,257,70,1,0,0,0,258,259,5,
116,0,0,259,260,5,114,0,0,260,261,5,117,0,0,261,262,5,101,0,0,262,72,1,0,
0,0,263,264,5,102,0,0,264,265,5,97,0,0,265,266,5,108,0,0,266,267,5,115,0,
0,267,268,5,101,0,0,268,74,1,0,0,0,269,270,5,110,0,0,270,271,5,105,0,0,271,
277,5,108,0,0,272,273,5,110,0,0,273,274,5,117,0,0,274,275,5,108,0,0,275,
277,5,108,0,0,276,269,1,0,0,0,276,272,1,0,0,0,277,76,1,0,0,0,278,279,5,105,
0,0,279,280,5,102,0,0,280,78,1,0,0,0,281,282,5,101,0,0,282,283,5,108,0,0,
283,284,5,115,0,0,284,285,5,101,0,0,285,80,1,0,0,0,286,287,5,119,0,0,287,
288,5,104,0,0,288,289,5,105,0,0,289,290,5,108,0,0,290,313,5,101,0,0,291,
292,5,102,0,0,292,293,5,111,0,0,293,313,5,114,0,0,294,295,5,102,0,0,295,
296,5,111,0,0,296,297,5,114,0,0,297,298,5,101,0,0,298,299,5,97,0,0,299,300,
5,99,0,0,300,313,5,104,0,0,301,302,5,102,0,0,302,303,5,111,0,0,303,304,5,
114,0,0,304,305,5,69,0,0,305,306,5,97,0,0,306,307,5,99,0,0,307,313,5,104,
0,0,308,309,5,108,0,0,309,310,5,111,0,0,310,311,5,111,0,0,311,313,5,112,
0,0,312,286,1,0,0,0,312,291,1,0,0,0,312,294,1,0,0,0,312,301,1,0,0,0,312,
308,1,0,0,0,313,82,1,0,0,0,314,315,5,114,0,0,315,316,5,101,0,0,316,317,5,
116,0,0,317,318,5,117,0,0,318,319,5,114,0,0,319,320,5,110,0,0,320,84,1,0,
0,0,321,322,5,110,0,0,322,323,5,101,0,0,323,324,5,119,0,0,324,86,1,0,0,0,
325,326,5,112,0,0,326,327,5,97,0,0,327,328,5,114,0,0,328,88,1,0,0,0,329,
330,5,103,0,0,330,331,5,114,0,0,331,332,5,111,0,0,332,333,5,117,0,0,333,
334,5,112,0,0,334,90,1,0,0,0,335,336,5,111,0,0,336,337,5,112,0,0,337,338,
5,116,0,0,338,92,1,0,0,0,339,340,5,99,0,0,340,341,5,114,0,0,341,342,5,105,
0,0,342,343,5,116,0,0,343,344,5,105,0,0,344,345,5,99,0,0,345,346,5,97,0,
0,346,347,5,108,0,0,347,94,1,0,0,0,348,349,5,115,0,0,349,350,5,101,0,0,350,
351,5,99,0,0,351,352,5,116,0,0,352,353,5,105,0,0,353,354,5,111,0,0,354,361,
5,110,0,0,355,356,5,102,0,0,356,357,5,114,0,0,357,358,5,97,0,0,358,359,5,
109,0,0,359,361,5,101,0,0,360,348,1,0,0,0,360,355,1,0,0,0,361,96,1,0,0,0,
362,363,5,97,0,0,363,364,5,115,0,0,364,98,1,0,0,0,365,366,5,116,0,0,366,
367,5,114,0,0,367,368,5,121,0,0,368,100,1,0,0,0,369,370,5,99,0,0,370,371,
5,97,0,0,371,372,5,116,0,0,372,373,5,99,0,0,373,374,5,104,0,0,374,102,1,
0,0,0,375,376,5,102,0,0,376,377,5,105,0,0,377,378,5,110,0,0,378,379,5,97,
0,0,379,380,5,108,0,0,380,381,5,108,0,0,381,382,5,121,0,0,382,104,1,0,0,
0,383,384,5,105,0,0,384,385,5,110,0,0,385,106,1,0,0,0,386,387,5,64,0,0,387,
388,5,83,0,0,388,389,5,116,0,0,389,390,5,97,0,0,390,391,5,114,0,0,391,392,
5,116,0,0,392,393,5,101,0,0,393,403,5,114,0,0,394,395,5,64,0,0,395,396,5,
115,0,0,396,397,5,116,0,0,397,398,5,97,0,0,398,399,5,114,0,0,399,400,5,116,
0,0,400,401,5,101,0,0,401,403,5,114,0,0,402,386,1,0,0,0,402,394,1,0,0,0,
403,108,1,0,0,0,404,405,5,64,0,0,405,406,5,82,0,0,406,407,5,101,0,0,407,
408,5,116,0,0,408,409,5,117,0,0,409,410,5,114,0,0,410,431,5,110,0,0,411,
412,5,64,0,0,412,413,5,114,0,0,413,414,5,101,0,0,414,415,5,116,0,0,415,416,
5,117,0,0,416,417,5,114,0,0,417,431,5,110,0,0,418,419,5,64,0,0,419,420,5,
82,0,0,420,421,5,101,0,0,421,422,5,112,0,0,422,423,5,108,0,0,423,431,5,121,
0,0,424,425,5,64,0,0,425,426,5,114,0,0,426,427,5,101,0,0,427,428,5,112,0,
0,428,429,5,108,0,0,429,431,5,121,0,0,430,404,1,0,0,0,430,411,1,0,0,0,430,
418,1,0,0,0,430,424,1,0,0,0,431,110,1,0,0,0,432,436,5,64,0,0,433,435,7,2,
0,0,434,433,1,0,0,0,435,438,1,0,0,0,436,434,1,0,0,0,436,437,1,0,0,0,437,
112,1,0,0,0,438,436,1,0,0,0,439,440,5,46,0,0,440,114,1,0,0,0,441,445,7,3,
0,0,442,444,7,2,0,0,443,442,1,0,0,0,444,447,1,0,0,0,445,443,1,0,0,0,445,
446,1,0,0,0,446,116,1,0,0,0,447,445,1,0,0,0,448,450,7,4,0,0,449,448,1,0,
0,0,450,451,1,0,0,0,451,449,1,0,0,0,451,452,1,0,0,0,452,118,1,0,0,0,453,
455,7,4,0,0,454,453,1,0,0,0,455,456,1,0,0,0,456,454,1,0,0,0,456,457,1,0,
0,0,457,458,1,0,0,0,458,462,5,46,0,0,459,461,7,4,0,0,460,459,1,0,0,0,461,
464,1,0,0,0,462,460,1,0,0,0,462,463,1,0,0,0,463,472,1,0,0,0,464,462,1,0,
0,0,465,467,5,46,0,0,466,468,7,4,0,0,467,466,1,0,0,0,468,469,1,0,0,0,469,
467,1,0,0,0,469,470,1,0,0,0,470,472,1,0,0,0,471,454,1,0,0,0,471,465,1,0,
0,0,472,120,1,0,0,0,473,479,5,34,0,0,474,478,8,5,0,0,475,476,5,34,0,0,476,
478,5,34,0,0,477,474,1,0,0,0,477,475,1,0,0,0,478,481,1,0,0,0,479,477,1,0,
0,0,479,480,1,0,0,0,480,483,1,0,0,0,481,479,1,0,0,0,482,484,7,5,0,0,483,
482,1,0,0,0,483,484,1,0,0,0,484,122,1,0,0,0,485,486,7,6,0,0,486,487,1,0,
0,0,487,488,6,60,0,0,488,124,1,0,0,0,489,490,5,47,0,0,490,491,5,47,0,0,491,
495,1,0,0,0,492,494,9,0,0,0,493,492,1,0,0,0,494,497,1,0,0,0,495,496,1,0,
0,0,495,493,1,0,0,0,496,498,1,0,0,0,497,495,1,0,0,0,498,499,5,10,0,0,499,
500,1,0,0,0,500,501,6,61,4,0,501,126,1,0,0,0,502,503,9,0,0,0,503,128,1,0,
0,0,504,508,4,63,0,0,505,507,3,3,0,0,506,505,1,0,0,0,507,510,1,0,0,0,508,
506,1,0,0,0,508,509,1,0,0,0,509,511,1,0,0,0,510,508,1,0,0,0,511,512,5,61,
0,0,512,513,5,61,0,0,513,517,1,0,0,0,514,516,8,6,0,0,515,514,1,0,0,0,516,
519,1,0,0,0,517,515,1,0,0,0,517,518,1,0,0,0,518,130,1,0,0,0,519,517,1,0,
0,0,520,522,8,6,0,0,521,520,1,0,0,0,522,523,1,0,0,0,523,521,1,0,0,0,523,
524,1,0,0,0,524,132,1,0,0,0,525,526,7,6,0,0,526,527,1,0,0,0,527,528,6,65,
5,0,528,134,1,0,0,0,529,531,8,6,0,0,530,529,1,0,0,0,531,532,1,0,0,0,532,
530,1,0,0,0,532,533,1,0,0,0,533,136,1,0,0,0,534,535,7,6,0,0,535,536,1,0,
0,0,536,537,6,67,5,0,537,138,1,0,0,0,24,0,1,2,206,276,312,360,402,430,436,
445,451,456,462,469,471,477,479,483,495,508,517,523,532,6,0,1,0,0,3,0,5,
2,0,5,1,0,0,2,0,4,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class sequenceLexer extends antlr4.Lexer {

    static grammarFileName = "sequenceLexer.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN", "COMMENT_CHANNEL", 
                                                               "MODIFIER_CHANNEL" ];
	static modeNames = [ "DEFAULT_MODE", "EVENT", "TITLE_MODE" ];
	static literalNames = [ null, null, "'const'", "'readonly'", "'static'", 
                         "'await'", "'title'", "':'", "'<<'", "'>>'", "'->'", 
                         null, "'||'", "'&&'", "'=='", "'!='", "'>'", "'<'", 
                         "'>='", "'<='", "'+'", "'-'", "'*'", "'/'", "'%'", 
                         "'^'", "'!'", "';'", "','", "'='", "'('", "')'", 
                         "'{'", "'}'", "'true'", "'false'", null, "'if'", 
                         "'else'", null, "'return'", "'new'", "'par'", "'group'", 
                         "'opt'", "'critical'", null, "'as'", "'try'", "'catch'", 
                         "'finally'", "'in'", null, null, null, "'.'" ];
	static symbolicNames = [ null, "WS", "CONSTANT", "READONLY", "STATIC", 
                          "AWAIT", "TITLE", "COL", "SOPEN", "SCLOSE", "ARROW", 
                          "COLOR", "OR", "AND", "EQ", "NEQ", "GT", "LT", 
                          "GTEQ", "LTEQ", "PLUS", "MINUS", "MULT", "DIV", 
                          "MOD", "POW", "NOT", "SCOL", "COMMA", "ASSIGN", 
                          "OPAR", "CPAR", "OBRACE", "CBRACE", "TRUE", "FALSE", 
                          "NIL", "IF", "ELSE", "WHILE", "RETURN", "NEW", 
                          "PAR", "GROUP", "OPT", "CRITICAL", "SECTION", 
                          "AS", "TRY", "CATCH", "FINALLY", "IN", "STARTER_LXR", 
                          "ANNOTATION_RET", "ANNOTATION", "DOT", "ID", "INT", 
                          "FLOAT", "STRING", "CR", "COMMENT", "OTHER", "DIVIDER", 
                          "EVENT_PAYLOAD_LXR", "EVENT_END", "TITLE_CONTENT", 
                          "TITLE_END" ];
	static ruleNames = [ "WS", "CONSTANT", "READONLY", "STATIC", "AWAIT", "TITLE", 
                      "COL", "SOPEN", "SCLOSE", "ARROW", "HEX", "COLOR", 
                      "OR", "AND", "EQ", "NEQ", "GT", "LT", "GTEQ", "LTEQ", 
                      "PLUS", "MINUS", "MULT", "DIV", "MOD", "POW", "NOT", 
                      "SCOL", "COMMA", "ASSIGN", "OPAR", "CPAR", "OBRACE", 
                      "CBRACE", "TRUE", "FALSE", "NIL", "IF", "ELSE", "WHILE", 
                      "RETURN", "NEW", "PAR", "GROUP", "OPT", "CRITICAL", 
                      "SECTION", "AS", "TRY", "CATCH", "FINALLY", "IN", 
                      "STARTER_LXR", "ANNOTATION_RET", "ANNOTATION", "DOT", 
                      "ID", "INT", "FLOAT", "STRING", "CR", "COMMENT", "OTHER", 
                      "DIVIDER", "EVENT_PAYLOAD_LXR", "EVENT_END", "TITLE_CONTENT", 
                      "TITLE_END" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

sequenceLexer.EOF = antlr4.Token.EOF;
sequenceLexer.WS = 1;
sequenceLexer.CONSTANT = 2;
sequenceLexer.READONLY = 3;
sequenceLexer.STATIC = 4;
sequenceLexer.AWAIT = 5;
sequenceLexer.TITLE = 6;
sequenceLexer.COL = 7;
sequenceLexer.SOPEN = 8;
sequenceLexer.SCLOSE = 9;
sequenceLexer.ARROW = 10;
sequenceLexer.COLOR = 11;
sequenceLexer.OR = 12;
sequenceLexer.AND = 13;
sequenceLexer.EQ = 14;
sequenceLexer.NEQ = 15;
sequenceLexer.GT = 16;
sequenceLexer.LT = 17;
sequenceLexer.GTEQ = 18;
sequenceLexer.LTEQ = 19;
sequenceLexer.PLUS = 20;
sequenceLexer.MINUS = 21;
sequenceLexer.MULT = 22;
sequenceLexer.DIV = 23;
sequenceLexer.MOD = 24;
sequenceLexer.POW = 25;
sequenceLexer.NOT = 26;
sequenceLexer.SCOL = 27;
sequenceLexer.COMMA = 28;
sequenceLexer.ASSIGN = 29;
sequenceLexer.OPAR = 30;
sequenceLexer.CPAR = 31;
sequenceLexer.OBRACE = 32;
sequenceLexer.CBRACE = 33;
sequenceLexer.TRUE = 34;
sequenceLexer.FALSE = 35;
sequenceLexer.NIL = 36;
sequenceLexer.IF = 37;
sequenceLexer.ELSE = 38;
sequenceLexer.WHILE = 39;
sequenceLexer.RETURN = 40;
sequenceLexer.NEW = 41;
sequenceLexer.PAR = 42;
sequenceLexer.GROUP = 43;
sequenceLexer.OPT = 44;
sequenceLexer.CRITICAL = 45;
sequenceLexer.SECTION = 46;
sequenceLexer.AS = 47;
sequenceLexer.TRY = 48;
sequenceLexer.CATCH = 49;
sequenceLexer.FINALLY = 50;
sequenceLexer.IN = 51;
sequenceLexer.STARTER_LXR = 52;
sequenceLexer.ANNOTATION_RET = 53;
sequenceLexer.ANNOTATION = 54;
sequenceLexer.DOT = 55;
sequenceLexer.ID = 56;
sequenceLexer.INT = 57;
sequenceLexer.FLOAT = 58;
sequenceLexer.STRING = 59;
sequenceLexer.CR = 60;
sequenceLexer.COMMENT = 61;
sequenceLexer.OTHER = 62;
sequenceLexer.DIVIDER = 63;
sequenceLexer.EVENT_PAYLOAD_LXR = 64;
sequenceLexer.EVENT_END = 65;
sequenceLexer.TITLE_CONTENT = 66;
sequenceLexer.TITLE_END = 67;

sequenceLexer.COMMENT_CHANNEL = 2;
sequenceLexer.MODIFIER_CHANNEL = 3;

sequenceLexer.EVENT = 1;
sequenceLexer.TITLE_MODE = 2;


sequenceLexer.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch (ruleIndex) {
		case 63:
			return this.DIVIDER_sempred(localctx, predIndex);
    	default:
    		throw "No registered predicate for:" + ruleIndex;
    }
};

sequenceLexer.prototype.DIVIDER_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.column === 0;
		default:
			throw "No predicate with index:" + predIndex;
	}
};




